#appModules/iexplorer.py#A part of NonVisual Desktop Access (NVDA)#Copyright (C) 2006-2012 NVDA Contributors#This file is covered by the GNU General Public License.#See the file COPYING for more details.import controlTypesimport appModuleHandlerimport apifrom NVDAObjects.UIA import UIA
class iexplorerunlabeleditem(UIA):	def _get_name(self):		try: 			s = self.firstChild.name		except:			s = self.UIAElement.CurrentAutomationID		return sclass iexplorertreeviewitem(UIA):	def _get_name(self):		s = ''		for x in self.children:			if x.UIAElement.CurrentClassName == 'TextBlock':				s = x.UIAElement.CurrentName		return sclass iexplorercopyitem(UIA):	def _get_name(self):		return self.firstChild.UIAElement.CurrentNameclass iexploreradressbookitem(UIA):	def _get_name(self):		return self.getChild(1).UIAElement.CurrentNameclass iexploreradressbookgroupitem(UIA):	def _get_name(self):		return self.getChild(0).UIAElement.CurrentNameclass iexplorerdetailsitem(UIA):
	def _get_name(self):
		objname = ''
		l = list()
		for x in self.children:
			objname = x.firstChild.name
			if objname != '': l.append(objname)
		s = ' '.join(l)
		return s
class iexplorervoicemailitem(UIA):	def _get_name(self):		s = ''		header = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorercallhistorygroupitem(UIA):	def _get_name(self):		s = ''		header = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.currentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorersafaribookmarkitem(UIA):	def _get_name(self):		s = ''		header = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorercalendargroupitem(UIA):	def _get_name(self):		s = ''		header = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorercalendareventitem(UIA):	def _get_name(self):		header = ''		s = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorernotefolderitem(UIA):	def _get_name(self):		header = ''		s = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)			if header: s = header+': '		s += ': '.join(l)		return sclass iexplorernoteitem(UIA):	def _get_name(self):		header = ''		s = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorerbackupitem(UIA):	def _get_name(self):		header = ''		s = ''		try:			header = self.columnHeaderText		except:			pass		objname = ''		l = list()		for x in self.children:			objtype = x.role			objname = x.UIAElement.CurrentName			if objname != None and objtype == controlTypes.ROLE_STATICTEXT: l.append(objname)		if header: s = header+': '		s += ''.join(l)		return sclass iexplorertrackitem(UIA):	def _get_name(self):		objname = ''		l = list()		for x in self.children:			header = x.columnHeaderText			objname = x.firstChild.name			if objname != '': l.append(header+': '+objname)		s = '; '.join(l)		return s
class  AppModule(appModuleHandler.AppModule):	def chooseNVDAObjectOverlayClasses(self, obj, clslist):
		if obj.name == '':			clslist.insert(0, iexplorerunlabeleditem)		elif obj.name == 'iExplorer.IEPreviewDetailsBindingItem':
			clslist.insert(0, iexplorerdetailsitem)
		elif obj.role == controlTypes.ROLE_TREEVIEWITEM:			clslist.insert(0, iexplorertreeviewitem)		elif (obj.name !=  None and 'iExplorer.Database_Parsing.Backups.Address_Book.ABPerson' in obj.name):			clslist.insert(0, iexploreradressbookitem)		elif (obj.name !=  None and 'iExplorer.Database_Parsing.Backups.Address_Book.ABGroup' in obj.name):			clslist.insert(0, iexploreradressbookgroupitem)		elif obj.name != None and obj.name == 'iExplorer.IEFSIMediaTrack':			clslist.insert(0,iexplorertrackitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Voicemail.IEVoicemailItem' in obj.name:			clslist.insert(0, iexplorervoicemailitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Call_History.IECallHistoryGroup' in obj.name:			clslist.insert(0, iexplorercallhistorygroupitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Safari.IESafariBookmarkObject' in obj.name:			clslist.insert(0, iexplorersafaribookmarkitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Calendar.IECalendarGroup' in obj.name:			clslist.insert(0, iexplorercalendargroupitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Calendar.IECalendarEventItem' in obj.name:			clslist.insert(0, iexplorercalendareventitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Notes.NoteFolder' in obj.name:			clslist.insert(0, iexplorernotefolderitem)		elif obj.name != None and 'iExplorer.Database_Parsing.Backups.Notes.LegacyNote' in obj.name:			clslist.insert(0, iexplorernoteitem)		elif obj.name != None and 'iExplorer.IELocalBackupFSI' in obj.name:			clslist.insert(0, iexplorerbackupitem)		elif obj.name != None and 'iExplorer.Actions.IEActionCopy' in obj.name:			clslist.insert(0, iexplorercopyitem)